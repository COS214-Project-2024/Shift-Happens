#ifndef ESTATE_H
#define ESTATE_H

#include "ResidentialBuilding.h"
#include <iostream>

/**
 * @class Estate
 * @brief Represents an estate, a specific type of residential building.
 * 
 * The Estate class inherits from the ResidentialBuilding class and provides methods
 * for managing and retrieving various resource metrics specific to estates.
 */
class Estate : public ResidentialBuilding {
private:
    int satisfactionScore; ///< The satisfaction score of the estate residents.
    int capacity;          ///< The capacity of the estate (number of units or residents).
    int incomePerHour;    ///< The income generated by the estate per hour.

public:
    /**
     * @brief Constructs an Estate object with the specified ID.
     * @param id The unique ID of the estate.
     */
    Estate(int id);

    /**
     * @brief Destructor for the Estate object.
     */
    ~Estate();

    /**
     * @brief Prints the details of the estate.
     */
    virtual void print() override;

    // New functions

    /**
     * @brief Gets the average satisfaction score for the estate.
     * @return The average satisfaction score as a double.
     */
    double getAverageSatisfactionScore() override;

    /**
     * @brief Gets the total water supply for the estate.
     * @return The total water supply.
     */
    int getTotalWaterSupply() override;

    /**
     * @brief Gets the total water usage of the estate.
     * @return The total water usage.
     */
    int getTotalWaterUsage() override;

    /**
     * @brief Gets the total electricity supply for the estate.
     * @return The total electricity supply.
     */
    int getTotalElectricitySupply() override;

    /**
     * @brief Gets the total electricity demand of the estate.
     * @return The total electricity demand.
     */
    int getTotalElectricityDemand() override;

    /**
     * @brief Gets the total sewage capacity of the estate.
     * @return The total sewage capacity.
     */
    int getTotalSewageCapacity() override;

    /**
     * @brief Gets the total waste capacity of the estate.
     * @return The total waste capacity.
     */
    int getTotalWasteCapacity() override;

    /**
     * @brief Gets the total waste production of the estate.
     * @return The total waste production.
     */
    int getTotalWasteProduction() override;

    /**
     * @brief Gets the total sewage production of the estate.
     * @return The total sewage production.
     */
    int getTotalSewageProduction() override;

    /**
     * @brief Gets the total number of jobs provided by the estate.
     * @return The total number of jobs.
     */
    int getTotalNumberOfJobs() override;
};

#endif // ESTATE_H

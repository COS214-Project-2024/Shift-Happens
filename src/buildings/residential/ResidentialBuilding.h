#ifndef RESIDENTIALBUILDING_H
#define RESIDENTIALBUILDING_H

#include "../Building.h"

/**
 * @class ResidentialBuilding
 * @brief Represents a residential building, which can house residents and manage resources.
 * 
 * The ResidentialBuilding class inherits from the Building class and includes properties
 * and methods specific to residential buildings, such as capacity, satisfaction scores,
 * and income generation.
 */
class ResidentialBuilding : public Building {
private:
    int capacity;              ///< The capacity of the building (number of residents or units).
    int satisfactionScore;     ///< The satisfaction score of the residents.
    int incomePerHour;         ///< The income generated by the building per hour.

public:
    /**
     * @brief Constructs a ResidentialBuilding object with specified parameters.
     * @param id The unique ID of the building.
     * @param capacity The capacity of the building.
     * @param variant The variant type of the building.
     * @param satisfactionScore The satisfaction score of the building's residents.
     * @param incomePerHour The income generated by the building per hour.
     * @param constructionPrice The construction price of the building.
     * @param wasteProduced The amount of waste produced by the building.
     * @param sewageProduced The amount of sewage produced by the building.
     * @param electricityDemand The electricity demand of the building.
     * @param waterDemand The water demand of the building.
     */
    ResidentialBuilding(int id, int capacity, std::string variant, int satisfactionScore, 
                        int incomePerHour, int constructionPrice, int wasteProduced, 
                        int sewageProduced, int electricityDemand, int waterDemand);

    /**
     * @brief Gets the capacity of the building.
     * @return The capacity as an integer.
     */
    int getCapacity();

    /**
     * @brief Sets the capacity of the building.
     * @param capacity The new capacity to set.
     */
    void setCapacity(int capacity);

    /**
     * @brief Gets the satisfaction score of the building's residents.
     * @return The satisfaction score as an integer.
     */
    int getSatisfactionScore();

    /**
     * @brief Sets the satisfaction score of the building's residents.
     * @param satisfactionScore The new satisfaction score to set.
     */
    void setSatisfactionScore(int satisfactionScore);

    /**
     * @brief Gets the income generated by the building per hour.
     * @return The income per hour as an integer.
     */
    int getIncomePerHour();

    /**
     * @brief Sets the income generated by the building per hour.
     * @param incomePerHour The new income per hour to set.
     */
    void setIncomePerHour(int incomePerHour);

    /**
     * @brief Destructor for the ResidentialBuilding object.
     */
    ~ResidentialBuilding();

    /**
     * @brief Prints the details of the residential building.
     */
    virtual void print() override;

    // New functions

    /**
     * @brief Gets the average satisfaction score for the residential building.
     * @return The average satisfaction score as a double.
     */
    double getAverageSatisfactionScore() override;

    /**
     * @brief Gets the total water supply for the residential building.
     * @return The total water supply.
     */
    int getTotalWaterSupply() override;

    /**
     * @brief Gets the total water usage of the residential building.
     * @return The total water usage.
     */
    int getTotalWaterUsage() override;

    /**
     * @brief Gets the total electricity supply for the residential building.
     * @return The total electricity supply.
     */
    int getTotalElectricitySupply() override;

    /**
     * @brief Gets the total electricity demand of the residential building.
     * @return The total electricity demand.
     */
    int getTotalElectricityDemand() override;

    /**
     * @brief Gets the total sewage capacity of the residential building.
     * @return The total sewage capacity.
     */
    int getTotalSewageCapacity() override;

    /**
     * @brief Gets the total waste capacity of the residential building.
     * @return The total waste capacity.
     */
    int getTotalWasteCapacity() override;

    /**
     * @brief Gets the total waste production of the residential building.
     * @return The total waste production.
     */
    int getTotalWasteProduction() override;

    /**
     * @brief Gets the total sewage production of the residential building.
     * @return The total sewage production.
     */
    int getTotalSewageProduction() override;

    /**
     * @brief Gets the total number of jobs provided by the residential building.
     * @return The total number of jobs.
     */
    int getTotalNumberOfJobs() override;
};

#endif // RESIDENTIALBUILDING_H
